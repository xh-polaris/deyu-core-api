// Code generated by hertz generator.

package core_api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/xh-polaris/deyu-core-api/biz/adaptor"
	"github.com/xh-polaris/deyu-core-api/biz/adaptor/controller/cmd"
	core_api "github.com/xh-polaris/deyu-core-api/biz/application/dto/core_api"
	"github.com/xh-polaris/deyu-core-api/provider"
)

// Completions .
// @router /v1/completions [POST]
func Completions(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CompletionsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().CompletionsService.Completions(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GenerateBrief .
// @router /conversation/brief [POST]
func GenerateBrief(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GenerateBriefReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().CompletionsService.GenerateBrief(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// CreateConversation .
// @router /conversation/create [POST]
func CreateConversation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateConversationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ConversationService.CreateConversation(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// RenameConversation .
// @router /conversation/rename [POST]
func RenameConversation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.RenameConversationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ConversationService.RenameConversation(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// ListConversation .
// @router /conversation/list [POST]
func ListConversation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.ListConversationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ConversationService.ListConversation(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetConversation .
// @router /conversation/get [POST]
func GetConversation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetConversationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ConversationService.GetConversation(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// DeleteConversation .
// @router /conversation/delete [POST]
func DeleteConversation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteConversationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ConversationService.DeleteConversation(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// SearchConversation .
// @router /conversation/search [POST]
func SearchConversation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SearchConversationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ConversationService.SearchConversation(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// ListAgents .
// @router /agents/list [POST]
func ListAgents(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.ListAgentsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.ListAgentsResp)

	c.JSON(consts.StatusOK, resp)
}

// Feedback .
// @router /feedback [POST]
func Feedback(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.FeedbackReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().FeedbackService.Feedback(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// Login .
// @router /auth/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().AuthService.Login(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// SendVerifyCode .
// @router /auth/verifyCode [POST]
func SendVerifyCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SendVerifyCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().AuthService.SendVerifyCode(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// SetPassword .
// @router /auth/setPassword [POST]
func SetPassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cmd.SetPasswordReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().AuthService.SetPassword(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}
